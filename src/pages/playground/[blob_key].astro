---
import { db } from "../../../db/index";
import Layout from "../../components/Layout.astro";

const { blob_key } = Astro.params;
const file = await db.query.uploads.findFirst({
  where: (u: any, { eq }: any) => eq(u.blob_key, blob_key),
});

function isImage(filename: string) {
  return /\.(jpg|jpeg|png|gif|webp|bmp|svg)$/i.test(filename);
}

if (!file || !isImage(file.filename)) {
  throw new Error("Not found");
}

const baseUrl = `${Astro.site ? Astro.site.origin : ""}/i/${blob_key}`;
---

<Layout>
  <h1 class="text-2xl font-bold mb-6 text-blue-700">Image Playground</h1>
  <div class="mb-4">
    <img
      id="preview-img"
      src={`/i/${blob_key}`}
      alt={file.filename}
      class="max-w-full max-h-96 rounded border"
    />
  </div>
  <form id="playground-form" class="flex flex-col gap-4 max-w-md">
    <div class="flex gap-2">
      <label class="flex flex-col text-sm font-medium">
        Width
        <input
          type="number"
          name="w"
          min="1"
          placeholder="e.g. 400"
          class="border rounded px-2 py-1"
        />
      </label>
      <label class="flex flex-col text-sm font-medium">
        Height
        <input
          type="number"
          name="h"
          min="1"
          placeholder="e.g. 400"
          class="border rounded px-2 py-1"
        />
      </label>
    </div>
    <label class="flex flex-col text-sm font-medium">
      Fit
      <select
        name="fit"
        class="border rounded px-2 py-1 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <option value="">(default)</option>
        <option value="cover">cover</option>
        <option value="contain">contain</option>
        <option value="fill">fill</option>
      </select>
    </label>
    <label class="flex flex-col text-sm font-medium">
      Format
      <select
        name="fm"
        class="border rounded px-2 py-1 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <option value="">(original)</option>
        <option value="jpg">jpg</option>
        <option value="png">png</option>
        <option value="webp">webp</option>
        <option value="avif">avif</option>
        <option value="gif">gif</option>
      </select>
    </label>
    <label class="flex flex-col text-sm font-medium">
      Quality
      <input
        type="number"
        name="q"
        min="1"
        max="100"
        placeholder="e.g. 80"
        class="border rounded px-2 py-1 disabled:opacity-50 disabled:cursor-not-allowed"
      />
    </label>
  </form>
  <div class="mt-6 flex flex-col gap-2">
    <label class="text-sm font-medium">Resulting URL</label>
    <div class="flex items-center gap-2">
      <input
        id="result-url"
        type="text"
        readonly
        class="w-full border rounded px-2 py-1 text-xs"
        value={baseUrl}
      />
      <button
        id="copy-url"
        type="button"
        class="px-3 py-1 bg-blue-600 text-white rounded text-xs font-medium cursor-pointer"
        >Copy</button
      >
      <span id="copy-feedback" class="text-green-600 text-xs hidden"
        >Copied!</span
      >
    </div>
  </div>
</Layout>

<script define:vars={{ blob_key }}>
  const form = document.getElementById("playground-form");
  const resultUrl = document.getElementById("result-url");
  const previewImg = document.getElementById("preview-img");
  const copyBtn = document.getElementById("copy-url");
  const feedback = document.getElementById("copy-feedback");

  function buildUrl() {
    if (!form || !resultUrl || !previewImg) return;

    // Get form values
    const width = form.elements.w?.value;
    const height = form.elements.h?.value;
    const fit = form.elements.fit?.value;
    const format = form.elements.fm?.value;
    const quality = form.elements.q?.value;

    // Build path-based URL with defaults
    const absoluteBaseUrl = `${window.location.origin}/i/${blob_key}`;
    let url = absoluteBaseUrl;

    if (width || height || fit || format || quality) {
      // Width is required for any transformations
      if (!width) return;
      url += "/" + width;

      // Height is required for fit, format, and quality
      if (height || fit || format || quality) {
        if (!height) return;
        url += "/" + height;

        // Use default fit (cover) if quality is set but fit isn't
        const effectiveFit = fit || (quality ? "cover" : "");
        if (effectiveFit) url += "/" + effectiveFit;

        // Quality can be set independently, uses default 75 if not specified
        if (quality) url += "/" + quality;

        // Format is optional, only add if explicitly set
        if (format) url += "/" + format;
      }
    }

    resultUrl.value = url;
    previewImg.src = url;
  }
  // Function to update field dependencies
  function updateFieldDependencies() {
    const width = form.elements.w?.value;
    const height = form.elements.h?.value;
    const fit = form.elements.fit;
    const format = form.elements.fm;
    const quality = form.elements.q;

    // Disable fit if no width or height
    if (fit) {
      fit.disabled = !width || !height;
      if (fit.disabled) fit.value = "";
    }

    // Disable format if no width or height
    if (format) {
      format.disabled = !width || !height;
      if (format.disabled) format.value = "";
    }

    // Disable quality if no width or height
    if (quality) {
      quality.disabled = !width || !height;
      if (quality.disabled) quality.value = "";
    }
  }

  if (form) {
    // Initialize field dependencies on page load
    updateFieldDependencies();

    form.addEventListener("input", () => {
      updateFieldDependencies();
      buildUrl();
    });
  }

  if (copyBtn && resultUrl && feedback) {
    copyBtn.addEventListener("click", () => {
      navigator.clipboard.writeText(resultUrl.value);
      feedback.classList.remove("hidden");
      setTimeout(() => feedback.classList.add("hidden"), 1200);
    });
  }
</script>
